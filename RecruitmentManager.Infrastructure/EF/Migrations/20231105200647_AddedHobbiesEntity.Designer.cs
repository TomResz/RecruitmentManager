// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RecruitmentManager.Infrastructure.EF.Context;

#nullable disable

namespace RecruitmentManager.Infrastructure.Migrations
{
    [DbContext(typeof(RecruitmentManagerDbContext))]
    [Migration("20231105200647_AddedHobbiesEntity")]
    partial class AddedHobbiesEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.Candidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.Candidate_Elements.CandidateData", b =>
                {
                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CandidateId");

                    b.ToTable("CandidateData");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.Candidate_Elements.Education", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateOfCompletion")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("LevelOfEducationId")
                        .HasColumnType("int");

                    b.Property<string>("Major")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("LevelOfEducationId");

                    b.ToTable("Education");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.Candidate_Elements.Experience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OfCompletionOfWork")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDateOfWork")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.Candidate_Elements.KnowledgeOfLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageProficiencyLevelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("LanguageProficiencyLevelId");

                    b.ToTable("KnowledgeOfLanguages");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.Candidate_Elements.LanguageProficiencyLevel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LanguageProficiencies");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.Candidate_Elements.LevelOfEducation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LevelOfEducations");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.Candidate_Elements.ProfilePicture", b =>
                {
                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("CandidateId");

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.Candidate_Elements.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.EmployeeData", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.ToTable("EmployeeData");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.Hobby", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("Hobbies");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.JobApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("InterviewQualified")
                        .HasColumnType("bit");

                    b.Property<Guid>("JobPostingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("JobPostingId");

                    b.ToTable("JobApplications");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.JobPosting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfPositions")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("JobPostings");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.RecruitmentStage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GradeWeight")
                        .HasColumnType("int");

                    b.Property<Guid>("JobPostingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("JobPostingId");

                    b.ToTable("RecruitmentStages");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.SelectedCandidatesToJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobPostingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("JobPostingId");

                    b.ToTable("SelectedCandidatesToJobs");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.Candidate_Elements.CandidateData", b =>
                {
                    b.HasOne("RecruitmentManager.Domain.Entities.Candidate", "Candidate")
                        .WithOne("CandidateData")
                        .HasForeignKey("RecruitmentManager.Domain.Entities.Candidate_Elements.CandidateData", "CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.Candidate_Elements.Education", b =>
                {
                    b.HasOne("RecruitmentManager.Domain.Entities.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecruitmentManager.Domain.Entities.Candidate_Elements.LevelOfEducation", "LevelOfEducation")
                        .WithMany("Educations")
                        .HasForeignKey("LevelOfEducationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("LevelOfEducation");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.Candidate_Elements.Experience", b =>
                {
                    b.HasOne("RecruitmentManager.Domain.Entities.Candidate", "Candidate")
                        .WithMany("Experiences")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.Candidate_Elements.KnowledgeOfLanguage", b =>
                {
                    b.HasOne("RecruitmentManager.Domain.Entities.Candidate", "Candidate")
                        .WithMany("KnowledgeOfLanguages")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecruitmentManager.Domain.Entities.Candidate_Elements.LanguageProficiencyLevel", "LanguageProficiencyLevel")
                        .WithMany("KnowledgeOfLanguages")
                        .HasForeignKey("LanguageProficiencyLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("LanguageProficiencyLevel");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.Candidate_Elements.ProfilePicture", b =>
                {
                    b.HasOne("RecruitmentManager.Domain.Entities.Candidate", "Candidate")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("RecruitmentManager.Domain.Entities.Candidate_Elements.ProfilePicture", "CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.Candidate_Elements.Skill", b =>
                {
                    b.HasOne("RecruitmentManager.Domain.Entities.Candidate", "Candidate")
                        .WithMany("Skills")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.Employee", b =>
                {
                    b.HasOne("RecruitmentManager.Domain.Entities.Role", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.EmployeeData", b =>
                {
                    b.HasOne("RecruitmentManager.Domain.Entities.Employee", "Employee")
                        .WithOne("EmployeeData")
                        .HasForeignKey("RecruitmentManager.Domain.Entities.EmployeeData", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.Hobby", b =>
                {
                    b.HasOne("RecruitmentManager.Domain.Entities.Candidate", "Candidate")
                        .WithMany("Hobbies")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.JobApplication", b =>
                {
                    b.HasOne("RecruitmentManager.Domain.Entities.Candidate", "Candidate")
                        .WithMany("JobApplications")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecruitmentManager.Domain.Entities.JobPosting", "JobPosting")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobPostingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("JobPosting");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.JobPosting", b =>
                {
                    b.HasOne("RecruitmentManager.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.RecruitmentStage", b =>
                {
                    b.HasOne("RecruitmentManager.Domain.Entities.Employee", "Employee")
                        .WithMany("RecruitmentStages")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecruitmentManager.Domain.Entities.JobPosting", "JobPosting")
                        .WithMany("RecruitmentStages")
                        .HasForeignKey("JobPostingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("JobPosting");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.SelectedCandidatesToJob", b =>
                {
                    b.HasOne("RecruitmentManager.Domain.Entities.Candidate", "Candidate")
                        .WithMany("SelectedCandidatesToJobs")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecruitmentManager.Domain.Entities.JobPosting", "JobPosting")
                        .WithMany("SelectedCandidatesToJobs")
                        .HasForeignKey("JobPostingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("JobPosting");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.Candidate", b =>
                {
                    b.Navigation("CandidateData")
                        .IsRequired();

                    b.Navigation("Experiences");

                    b.Navigation("Hobbies");

                    b.Navigation("JobApplications");

                    b.Navigation("KnowledgeOfLanguages");

                    b.Navigation("ProfilePicture")
                        .IsRequired();

                    b.Navigation("SelectedCandidatesToJobs");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.Candidate_Elements.LanguageProficiencyLevel", b =>
                {
                    b.Navigation("KnowledgeOfLanguages");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.Candidate_Elements.LevelOfEducation", b =>
                {
                    b.Navigation("Educations");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.Employee", b =>
                {
                    b.Navigation("EmployeeData")
                        .IsRequired();

                    b.Navigation("RecruitmentStages");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.JobPosting", b =>
                {
                    b.Navigation("JobApplications");

                    b.Navigation("RecruitmentStages");

                    b.Navigation("SelectedCandidatesToJobs");
                });

            modelBuilder.Entity("RecruitmentManager.Domain.Entities.Role", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
